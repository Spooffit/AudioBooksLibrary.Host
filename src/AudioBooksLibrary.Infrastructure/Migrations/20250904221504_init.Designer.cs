// <auto-generated />
using System;
using AudioBooksLibrary.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AudioBooksLibrary.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250904221504_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AudioBooksLibrary.Core.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("display_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("AudioBooksLibrary.Core.Entities.Audiobook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AuthorsLine")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("authors_line");

                    b.Property<string>("CoverUrl")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("cover_url");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_audiobooks");

                    b.ToTable("audiobooks", (string)null);
                });

            modelBuilder.Entity("AudioBooksLibrary.Core.Entities.AudiobookAuthor", b =>
                {
                    b.Property<Guid>("AudiobookId")
                        .HasColumnType("uuid")
                        .HasColumnName("audiobook_id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.HasKey("AudiobookId", "AuthorId")
                        .HasName("pk_audiobook_authors");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_audiobook_authors_author_id");

                    b.ToTable("audiobook_authors", (string)null);
                });

            modelBuilder.Entity("AudioBooksLibrary.Core.Entities.AudiobookPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AudiobookId")
                        .HasColumnType("uuid")
                        .HasColumnName("audiobook_id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<int>("DurationMs")
                        .HasColumnType("integer")
                        .HasColumnName("duration_ms");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("file_path");

                    b.Property<long>("FileSizeBytes")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size_bytes");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<string>("Md5")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("md5");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mime_type");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_audiobook_parts");

                    b.HasIndex("Md5")
                        .IsUnique()
                        .HasDatabaseName("ix_audiobook_parts_md5");

                    b.HasIndex("AudiobookId", "Index")
                        .IsUnique()
                        .HasDatabaseName("ix_audiobook_parts_audiobook_id_index");

                    b.ToTable("audiobook_parts", (string)null);
                });

            modelBuilder.Entity("AudioBooksLibrary.Core.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_authors");

                    b.ToTable("authors", (string)null);
                });

            modelBuilder.Entity("AudioBooksLibrary.Core.Entities.PlaybackProgress", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("AudiobookId")
                        .HasColumnType("uuid")
                        .HasColumnName("audiobook_id");

                    b.Property<DateTime?>("CompletedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at_utc");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_completed");

                    b.Property<Guid?>("PartId")
                        .HasColumnType("uuid")
                        .HasColumnName("part_id");

                    b.Property<int>("PositionMs")
                        .HasColumnType("integer")
                        .HasColumnName("position_ms");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("UserId", "AudiobookId")
                        .HasName("pk_playback_progresses");

                    b.HasIndex("AudiobookId")
                        .HasDatabaseName("ix_playback_progresses_audiobook_id");

                    b.HasIndex("PartId")
                        .HasDatabaseName("ix_playback_progresses_part_id");

                    b.ToTable("playback_progresses", (string)null);
                });

            modelBuilder.Entity("AudioBooksLibrary.Core.Entities.TimelineMarker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AudiobookId")
                        .HasColumnType("uuid")
                        .HasColumnName("audiobook_id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_user_id");

                    b.Property<Guid?>("PartId")
                        .HasColumnType("uuid")
                        .HasColumnName("part_id");

                    b.Property<int>("PositionMs")
                        .HasColumnType("integer")
                        .HasColumnName("position_ms");

                    b.Property<string>("Text")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_timeline_markers");

                    b.HasIndex("CreatedByUserId")
                        .HasDatabaseName("ix_timeline_markers_created_by_user_id");

                    b.HasIndex("PartId")
                        .HasDatabaseName("ix_timeline_markers_part_id");

                    b.HasIndex("AudiobookId", "PartId", "PositionMs")
                        .HasDatabaseName("ix_timeline_markers_audiobook_id_part_id_position_ms");

                    b.ToTable("timeline_markers", (string)null);
                });

            modelBuilder.Entity("AudioBooksLibrary.Core.Entities.TimelineMarkerLike", b =>
                {
                    b.Property<Guid>("MarkerId")
                        .HasColumnType("uuid")
                        .HasColumnName("marker_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.HasKey("MarkerId", "UserId")
                        .HasName("pk_timeline_marker_likes");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_timeline_marker_likes_user_id");

                    b.ToTable("timeline_marker_likes", (string)null);
                });

            modelBuilder.Entity("AudioBooksLibrary.Core.Entities.AudiobookAuthor", b =>
                {
                    b.HasOne("AudioBooksLibrary.Core.Entities.Audiobook", "Audiobook")
                        .WithMany("AudiobookAuthors")
                        .HasForeignKey("AudiobookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_audiobook_authors_audiobooks_audiobook_id");

                    b.HasOne("AudioBooksLibrary.Core.Entities.Author", "Author")
                        .WithMany("AudiobookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_audiobook_authors_authors_author_id");

                    b.Navigation("Audiobook");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("AudioBooksLibrary.Core.Entities.AudiobookPart", b =>
                {
                    b.HasOne("AudioBooksLibrary.Core.Entities.Audiobook", "Audiobook")
                        .WithMany("Parts")
                        .HasForeignKey("AudiobookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_audiobook_parts_audiobooks_audiobook_id");

                    b.Navigation("Audiobook");
                });

            modelBuilder.Entity("AudioBooksLibrary.Core.Entities.PlaybackProgress", b =>
                {
                    b.HasOne("AudioBooksLibrary.Core.Entities.Audiobook", "Audiobook")
                        .WithMany()
                        .HasForeignKey("AudiobookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_playback_progresses_audiobooks_audiobook_id");

                    b.HasOne("AudioBooksLibrary.Core.Entities.AudiobookPart", "Part")
                        .WithMany()
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_playback_progresses_audiobook_parts_part_id");

                    b.HasOne("AudioBooksLibrary.Core.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_playback_progresses_users_user_id");

                    b.Navigation("Audiobook");

                    b.Navigation("Part");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AudioBooksLibrary.Core.Entities.TimelineMarker", b =>
                {
                    b.HasOne("AudioBooksLibrary.Core.Entities.Audiobook", "Audiobook")
                        .WithMany()
                        .HasForeignKey("AudiobookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_timeline_markers_audiobooks_audiobook_id");

                    b.HasOne("AudioBooksLibrary.Core.Entities.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_timeline_markers_users_created_by_user_id");

                    b.HasOne("AudioBooksLibrary.Core.Entities.AudiobookPart", "Part")
                        .WithMany()
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_timeline_markers_audiobook_parts_part_id");

                    b.Navigation("Audiobook");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("AudioBooksLibrary.Core.Entities.TimelineMarkerLike", b =>
                {
                    b.HasOne("AudioBooksLibrary.Core.Entities.TimelineMarker", "Marker")
                        .WithMany("Likes")
                        .HasForeignKey("MarkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_timeline_marker_likes_timeline_markers_marker_id");

                    b.HasOne("AudioBooksLibrary.Core.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_timeline_marker_likes_users_user_id");

                    b.Navigation("Marker");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AudioBooksLibrary.Core.Entities.Audiobook", b =>
                {
                    b.Navigation("AudiobookAuthors");

                    b.Navigation("Parts");
                });

            modelBuilder.Entity("AudioBooksLibrary.Core.Entities.Author", b =>
                {
                    b.Navigation("AudiobookAuthors");
                });

            modelBuilder.Entity("AudioBooksLibrary.Core.Entities.TimelineMarker", b =>
                {
                    b.Navigation("Likes");
                });
#pragma warning restore 612, 618
        }
    }
}
